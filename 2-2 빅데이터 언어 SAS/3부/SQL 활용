/*
data step프로토콜 SQL프로토콜 으로 나뉨
두가지 섞어서 사용하지 못함.(문법이 조금 다름)
ex)1. desanding 앞에 쓰고 SQL은 뒤에 씀.
     2. drop keep 구분자 공백 SQL은 콤마.
기존에 SQL문법을 그대로 쓰기 때문에 다른거임.
*/


proc sql; #SQL모드로 바꿔라. 이거 쓴 다음에는 data step모드 문법 사용 못함.
quit; #data step모드로 돌아감. SQL모드 나가기.

select 변수1, 변수2, 변수3 from dataset_name; #keep(변수1 변수2 변수3);



data data_app;
input id sex $ year job $ sal comma7. birth date10. ;
format sal comma7. birth yymmdd10.;
cards;
01 남성 55 의사 100,000 23APR1963
02 남성 40 공무원  70,000 03MAY1978
03 남성 25 교사  30,000 12JUN1993
04 여성 30 교사  50,000 30JUL1988
05 여성 40  의사  80,000 07NOV1978
06 여성 30 공무원 60,000 05APR1988
;
run;
Q1. data_app에서 sql문을 이용하여 직업과 연봉 출력
A1.
proc sql; 
select job, sal #마지막 변수 뒤에는 ,쓰지 않는다./모든 변수 선택하고 싶으면 select *
from data_app; #run안써도 실행 됨.

Q2. data_app에서 sql문을 이용하여 남성만 출력
A2.
proc sql;
select job, sal
from data_app
where sex='남성';

합치면, 
proc sql;
select job, sal from data_app;
select * from data_app where sex="남성";
quit;


Q.팀 별 평균을 산출하여 큰 순서대로 정렬

*proc means# 연속형 변수의 평균 구하는 가장 기본적인 함수

-data step
proc sort data=ex;
by team;
run;
proc means data=ex;
var strtwght; #strtwght라는 변수에 대해
by team; # team별 통계량 출력창 출력
output out=ma mean=mean; #통계량을 data set으로 저장함.
run;
proc sort data=m;
by descending m;
run;
proc print data=m;
run;

-SQL
proc sql;
select team, mean(strtwght) as mean_s
from ex #ex data set에서 
group by team #team별로(grouping)
order by mean_s desc; # 큰 순서대로 출력해줘
quit;

Q.data_app에서 성별에 따른 평균연봉이 높은 순(1) 직업에 따라 낮은 순(2)으로 출력
A.
-data step
1.
proc sort data=data_app;
by sal;
run;
proc means data=data_app;
var sal;
by sex;
output out=app_s mean=mean;
run;
proc sort data=app_s;
by descending mean;
run;
2.
proc sort data=data_app;
by job;
run;
proc means data=data_app;
var sal;
by job;
output out=app_j mean=mean;
run;
proc sort data=app_j;
by  mean;
run;

-SQL
proc sql;
select sex, mean(sal) as mean_s
from data_app
group by sex 
order by mean_s desc;#1
select job, mean(sal) as mean_s
from data_app
group by job
order by mean_s;#2
quit;





proc sql;
select name, strtwght
from ex
where team='yellow'; #한 문장으로 마무리함. where은 조건문
quit;


proc sql;
select name
from ex
where name like; '이%'; #'이'로 시작하는 사람들의 이름을 출력해
quit;


proc sql;
select name
from ex
where name like '_동'; #'동'으로 끝나는 사람을 출력(앞 포인트에 맞게끔 설정. __동 이면 '동'앞 2자는 뭐든 상관x. 넘으면x)
quit;


proc sql;
select name, strtwght
from ex
where strtwght in (80,90); #or을 간편하게 하기 위한 함수.
quit;


proc sql;
select name, strtwght
from ex
where strtwght between 60 and 80; #60< =변수 <=80
quit;


proc sql;
select name, strtwght
from ex
where strtwght is null; # null만 출력함. 컴이 알아서 문자나 숫자나 결측이면 다 찾아냄 
quit;



Q1. data_app에서 sql문의 like를 이용하여 남성의 연령과 직업 출력하기

A1.
proc sql;
select sex, year, job
from data_app;
quit;

A1-2
proc sql;
select year, job
from data_app
where sex like '남%';
quit;


Q2. data_app에서 sql문의 where을 이용하여 연봉이 결측이 아닌 대상자의 전체 변수 출력하기

A2.
proc sql;
select *  # 전체 다 선택
from data_app
where sal is not null;  # null아닌 것만 출력
quit;




-sql 새 데이터셋 만들기

 -data step
data ex_yellow;
set ex;
if team='yellow';
keep strtwght endwght;
run;

 -sql
proc sql;
create table ex_yellow as # ex_yellow데이터 셋 만드는데 as뒤의 것 대로 만든다.
select strtwght, endwght as e #기존 데이터셋 이름 쉽게 바꿀 수 있음. endwght를 e로 새 데이터셋 만드는 중간에도 가능.(*1)
from ex
where team='yellow';
quit;

*1. select strtwght-endwgth as diffwght


sql변수 선택 및 format 지정

data ex4;
input idno name $ team $ strtwght cost comma6. strtdata date10.  strttime time5.;
format cost comma6. strtdata date10.  strttime time5.;
cards;
1001 홍길동 red 90 50,000 13APR2015 9:00
1002 이순신 yellow 80 40,000 12APR2015 10:00
1003 세종대왕 red 80 45,000 03APR2014 15:00
1004 유관순 yellow 65 40,000 20APR2013 14:00
1005 신사임당 RED 60 25,000 07APR2014 10:00
;
run;

proc sql;
select team, strttime+3600 as end time format=time5.
from ex4
where calculated endtime<'12:00't;
quit;
'12:00'은 문자로 인식함. '12:00't를 붙여야 시간으로 인식함.
where은 (새 변수 만들기 전)기존 data set에 있는 것마 조건 걸 수 있음.
sql에서 calculated옵션 사용하면 만든 변수도 조건에 걸 수 있음.★





Q1.sql문을 이용항 data_app에서 생년월일에 연령(일수)를 더한 날짜변수 생성

A1.
proc sql;
select *, birth+year*365 as y_b format date10.
from data_app;
quit;

Q2.sql문을 이용항 data_app에서 Q1에서 새롭게 생성된 날짜변수가 1분기에 해당하는 대상자만 포함한 데이터 생성하기

Q2.
proc sql;
create table data_app_Q2 as
select *
from data_app
where calculated y_b<'01APR2018'd;
quit;


Q1+Q2

proc sql;
create table data_app_Q2 as
select *, birth+year*365 as y_b format date10.
from data_app
where calxulater y_b<'014APR2018'd;
quit;


*두 개의 dataset 행 결합(잘 사용은 안함. 시험에는 나옴)
data a;
input x y $ @@;
cards;
1 one
2 two
2 two
3 three
;
run;

data b;
input x z $ @@;
cards;
1 one
2 two 
3 three
;
run;


-union  #합집합
/*앞 변수 기준으로 그냥 붙어버림*/
proc sql;
create table m1 as
select * from a
union
select * from b;
quit;
>중볻된거 제거(=proc no dup)

proc sql;
create table m2 as
select * from a
union all
select * from b;
quit;
>중복된것도 포함

/*data step에서는,
set a b*/


-except  #여집합
proc sql;
create table m3 as
select * from a
except
select * from b;
quit;
>a합집합b에서 여집합 b(data step에서는 merge써서 해야함.)

-intersect  #교집합
proc sql;
create table m4 as
select * from a
intersect
select * from b;
quit;
>중복 제거

-outer  #그냥 a, b 다 붙여줌(같은 변수 명이라도 그냥 붙임.)
proc sql;
create table m5 as
select * from a
outer union /*corr*/
select * from b;
quit;
>출력 값이랑 라이브러리 데이터 셋에서 나오는거 다름.
라이브러리 데이터셋에선 같은 변수 명 쓸 수 없어서 그럼.
*>변수 명이 같으면 밑에 붙이고 아니면 결측 만들어서 붙여라는 corr 옵션을 넣으면 됨. set문과 가장 비슷

*두 개의 dataset 열 결합(잘 사용은 안함. 시험에는 나옴)★
x=key 변수
data a;
input x y $ @@;
cards;
1 one
2 two
2 two
3 three
;
run;
data b;
input x z $ @@;
cards;
1 one
2 two 
4 four
;
run;


-join ☆
proc sql;
create table t1 as
select *
from a
join b on
a.x=b.x;  #a의 x변수가 b의 x변수가 같은 것만 붙여라(like by key변수)/문장 속 .은 해당 dataset의 변수/dataset의 .은 위치 
quit;
>겹치는거 제거하고 붙임
(merge하고, 두 값의 결측 있는거 다 지우면 됨.)

-full join
proc sql;
create table t2 as
select *
from a
full join b on
a.x=b.x; #data step은 rename 해야하지만, sql은 필요없음. ex) a.x=b.z
quit;
>싹 다 붙임(없는 값은 결측처리함.)
*>x에 4를 붙이고 싶으면, select coalesce(a.x, b.x) as x, y, z =>a.x를 찍는데 없으면 b.x를 찍어라.
     (=merge 랑 비슷)

Q.full join의 coalesce사용한 것과 같게 merge로 만들어보기.

proc sql;
create table t2_2 as
select coalesce(a.x, b.x) as x,y,z
from a
full join b on
a.x=b.x;
quit;


A.
proc sort data=a;
by x;
run;
proc sort data=b;
by x;
run;
data t2_1;
merge a b;
by x;
run;



-left join ☆
left에 해당하는 a set은 그대로 가져오고 a set에 맞지 않는 b set data는 날림.
같은 값이 a set에 연달아 있으면 b set도 덩달아 뻥튀기 됨. 
proc sql;
create table t3 as
select *
from a
left join b on
a.x=b.x;
quit;


-right join (잘 안씀)
b set기준으로 a set붙임.(left join 쓰면서 위치만 바꾸면 됨.)
proc sql;
create table t4 as
select *
from a
right join b on
a.x=b.x;
quit;



Q1. 두 data를 기반으로 성별에 따른 평균연령 출력
option validvarname=any;
data data_one;
input 아이디 성별 $ @@;
cards;
1 M
2 F
3 F
4 M
5 F
;
run;
data data_two;
input id 연령 @@;
cards;
1 35
2 32
4 41
5 23
6 34
;
run;

A1. 

proc sql;
create table q1 as
select coalesce(data_one.아이디, data_two.id) as 아이디, 성별, 연령
from data_one
full join data_two on
data_one.아이디=data_two.id;  #두 데이터셋 합치기





proc sql;
create table q1 as
select 성별, mean(연령) as mean_a
from data_one
left join data_two on
data_one.아이디=data_two.id
group by 성별
order by mean_a
;



Q2. 두 data를 기반으로 연령정보가 있는 대상자에 대한 성별 빈도 출력

A2.
proc sql;
select 성별, count(성별) as count_s
from data_one 
join data_two on
data_one.아이디=data_two.id
group by 성별
order by count_s desc;
quit;


